package romannumerals;import static org.assertj.core.api.Assertions.assertThat;import org.junit.Rule;import org.junit.Test;import org.junit.rules.ExpectedException;public class RomanToNumeralsTest {    private RomanToNumeralsConverter converter = new RomanToNumeralsConverter();    @Rule    public ExpectedException thrown = ExpectedException.none();    @Test    public void convertICharacterToOne() throws IllegalAccessException {        assertThat(converter.convert("I")).isEqualTo(1);    }    @Test    public void convertVCharacterToFive() throws IllegalAccessException {        assertThat(converter.convert("V")).isEqualTo(5);    }    @Test    public void convertVICharacterToSix() throws IllegalAccessException {        assertThat(converter.convert("VI")).isEqualTo(6);    }    @Test    public void convertIVCharacterToFour() throws IllegalAccessException {        assertThat(converter.convert("IV")).isEqualTo(4);    }    @Test    public void convertCharactersWithAllowedDuplicates() throws IllegalAccessException {        assertThat(converter.convert("XXIII")).isEqualTo(23);    }    @Test    public void convertTooMuchICharacterDublicates() throws IllegalAccessException {        thrown.expect(IndexOutOfBoundsException.class);        converter.convert("IIII");    }    @Test    public void convertTooMuchXCharacterDublicates() throws IllegalAccessException {        thrown.expect(IndexOutOfBoundsException.class);        converter.convert("XXXX");    }    @Test    public void convertTooMuchCCharacterDublicates() throws IllegalAccessException {        thrown.expect(IndexOutOfBoundsException.class);        converter.convert("CCCC");    }    @Test    public void convertComplexYearValue() throws IllegalAccessException {        thrown.expect(IndexOutOfBoundsException.class);        converter.convert("MDCCCCLXXXXIII");    }    @Test    public void convertComplexCharacters() throws IllegalAccessException {        assertThat(converter.convert("CMIL")).isEqualTo(949);    }    @Test    public void convertSimplifiedYearValue() throws IllegalAccessException {        assertThat(converter.convert("MXMIII")).isEqualTo(1993);    }}